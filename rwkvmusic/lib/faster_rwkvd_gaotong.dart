// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// faster_rwkvd.h in dart
class faster_rwkvd {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  faster_rwkvd(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  faster_rwkvd.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// @brief Create an RWKV model.
  ///
  /// @param path The path of the model.
  /// @param strategy The strategy.
  /// @return rwkv_model_t The handle to the created model.
  rwkv_model_t rwkv_model_create(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> strategy,
  ) {
    return _rwkv_model_create(
      path,
      strategy,
    );
  }

  late final _rwkv_model_createPtr = _lookup<
      ffi.NativeFunction<
          rwkv_model_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('rwkv_model_create');
  late final _rwkv_model_create = _rwkv_model_createPtr.asFunction<
      rwkv_model_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Create an RWKV ABCTokenizer.
  ///
  /// @return rwkv_tokenizer_t The handle to the created ABCTokenizer.
  rwkv_tokenizer_t rwkv_ABCTokenizer_create() {
    return _rwkv_ABCTokenizer_create();
  }

  late final _rwkv_ABCTokenizer_createPtr =
      _lookup<ffi.NativeFunction<rwkv_tokenizer_t Function()>>(
          'rwkv_ABCTokenizer_create');
  late final _rwkv_ABCTokenizer_create =
      _rwkv_ABCTokenizer_createPtr.asFunction<rwkv_tokenizer_t Function()>();

  rwkv_tokenizer_t rwkv_Tokenizer_create(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _rwkv_Tokenizer_create(
      path,
    );
  }

  late final _rwkv_Tokenizer_createPtr = _lookup<
          ffi.NativeFunction<rwkv_tokenizer_t Function(ffi.Pointer<ffi.Char>)>>(
      'rwkv_Tokenizer_create');
  late final _rwkv_Tokenizer_create = _rwkv_Tokenizer_createPtr
      .asFunction<rwkv_tokenizer_t Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Create an RWKV sampler.
  ///
  /// @return rwkv_sampler_t The handle to the created sampler.
  rwkv_sampler_t rwkv_sampler_create() {
    return _rwkv_sampler_create();
  }

  late final _rwkv_sampler_createPtr =
      _lookup<ffi.NativeFunction<rwkv_sampler_t Function()>>(
          'rwkv_sampler_create');
  late final _rwkv_sampler_create =
      _rwkv_sampler_createPtr.asFunction<rwkv_sampler_t Function()>();

  /// @brief Set the seed of the sampler.
  ///
  /// @param sampler_handle The handle to the sampler.
  /// @param seed The seed.
  void rwkv_sampler_set_seed(
    rwkv_sampler_t sampler_handle,
    int seed,
  ) {
    return _rwkv_sampler_set_seed(
      sampler_handle,
      seed,
    );
  }

  late final _rwkv_sampler_set_seedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(rwkv_sampler_t, ffi.Int)>>(
          'rwkv_sampler_set_seed');
  late final _rwkv_sampler_set_seed = _rwkv_sampler_set_seedPtr
      .asFunction<void Function(rwkv_sampler_t, int)>();

  /// @brief Run the RWKV model with single input, with encoder/sampler/decoder.
  int rwkv_abcmodel_run_prompt(
    rwkv_model_t model_handle,
    rwkv_tokenizer_t tokenizer_handle,
    rwkv_sampler_t sampler_handle,
    ffi.Pointer<ffi.Char> input,
    int input_length,
    double temperature,
    int top_k,
    double top_p,
  ) {
    return _rwkv_abcmodel_run_prompt(
      model_handle,
      tokenizer_handle,
      sampler_handle,
      input,
      input_length,
      temperature,
      top_k,
      top_p,
    );
  }

  late final _rwkv_abcmodel_run_promptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Char Function(
              rwkv_model_t,
              rwkv_tokenizer_t,
              rwkv_sampler_t,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Float,
              ffi.Int,
              ffi.Float)>>('rwkv_abcmodel_run_prompt');
  late final _rwkv_abcmodel_run_prompt =
      _rwkv_abcmodel_run_promptPtr.asFunction<
          int Function(rwkv_model_t, rwkv_tokenizer_t, rwkv_sampler_t,
              ffi.Pointer<ffi.Char>, int, double, int, double)>();

  /// @brief Run the RWKV model with single input, with encoder/sampler/decoder.
  int rwkv_abcmodel_run_with_tokenizer_and_sampler(
    rwkv_model_t model_handle,
    rwkv_tokenizer_t tokenizer_handle,
    rwkv_sampler_t sampler_handle,
    int input,
    double temperature,
    int top_k,
    double top_p,
  ) {
    return _rwkv_abcmodel_run_with_tokenizer_and_sampler(
      model_handle,
      tokenizer_handle,
      sampler_handle,
      input,
      temperature,
      top_k,
      top_p,
    );
  }

  late final _rwkv_abcmodel_run_with_tokenizer_and_samplerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Char Function(
              rwkv_model_t,
              rwkv_tokenizer_t,
              rwkv_sampler_t,
              ffi.Char,
              ffi.Float,
              ffi.Int,
              ffi.Float)>>('rwkv_abcmodel_run_with_tokenizer_and_sampler');
  late final _rwkv_abcmodel_run_with_tokenizer_and_sampler =
      _rwkv_abcmodel_run_with_tokenizer_and_samplerPtr.asFunction<
          int Function(rwkv_model_t, rwkv_tokenizer_t, rwkv_sampler_t, int,
              double, int, double)>();

  void rwkv_model_clear_states(
    rwkv_model_t model_handle,
  ) {
    return _rwkv_model_clear_states(
      model_handle,
    );
  }

  late final _rwkv_model_clear_statesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(rwkv_model_t)>>(
          'rwkv_model_clear_states');
  late final _rwkv_model_clear_states =
      _rwkv_model_clear_statesPtr.asFunction<void Function(rwkv_model_t)>();

  int rwkv_midimodel_check_stopped(
    rwkv_tokenizer_t tokenizer_handle,
  ) {
    return _rwkv_midimodel_check_stopped(
      tokenizer_handle,
    );
  }

  late final _rwkv_midimodel_check_stoppedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(rwkv_tokenizer_t)>>(
          'rwkv_midimodel_check_stopped');
  late final _rwkv_midimodel_check_stopped = _rwkv_midimodel_check_stoppedPtr
      .asFunction<int Function(rwkv_tokenizer_t)>();

  void rwkv_midimodel_run_prompt_from_file(
    rwkv_model_t model_handle,
    rwkv_tokenizer_t tokenizer_handle,
    rwkv_sampler_t sampler_handle,
    ffi.Pointer<ffi.Char> input_path,
    int input_path_length,
    double temperature,
    int top_k,
    double top_p,
  ) {
    return _rwkv_midimodel_run_prompt_from_file(
      model_handle,
      tokenizer_handle,
      sampler_handle,
      input_path,
      input_path_length,
      temperature,
      top_k,
      top_p,
    );
  }

  late final _rwkv_midimodel_run_prompt_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              rwkv_model_t,
              rwkv_tokenizer_t,
              rwkv_sampler_t,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Float,
              ffi.Int,
              ffi.Float)>>('rwkv_midimodel_run_prompt_from_file');
  late final _rwkv_midimodel_run_prompt_from_file =
      _rwkv_midimodel_run_prompt_from_filePtr.asFunction<
          void Function(rwkv_model_t, rwkv_tokenizer_t, rwkv_sampler_t,
              ffi.Pointer<ffi.Char>, int, double, int, double)>();

  void rwkv_midimodel_run_with_text_prompt(
    rwkv_model_t model_handle,
    rwkv_tokenizer_t tokenizer_handle,
    rwkv_sampler_t sampler_handle,
    ffi.Pointer<ffi.Char> input_text,
    int input_text_length,
    double temperature,
    int top_k,
    double top_p,
  ) {
    return _rwkv_midimodel_run_with_text_prompt(
      model_handle,
      tokenizer_handle,
      sampler_handle,
      input_text,
      input_text_length,
      temperature,
      top_k,
      top_p,
    );
  }

  late final _rwkv_midimodel_run_with_text_promptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              rwkv_model_t,
              rwkv_tokenizer_t,
              rwkv_sampler_t,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Float,
              ffi.Int,
              ffi.Float)>>('rwkv_midimodel_run_with_text_prompt');
  late final _rwkv_midimodel_run_with_text_prompt =
      _rwkv_midimodel_run_with_text_promptPtr.asFunction<
          void Function(rwkv_model_t, rwkv_tokenizer_t, rwkv_sampler_t,
              ffi.Pointer<ffi.Char>, int, double, int, double)>();

  void rwkv_midimodel_run_with_tokenizer_and_sampler(
    rwkv_model_t model_handle,
    rwkv_tokenizer_t tokenizer_handle,
    rwkv_sampler_t sampler_handle,
    double temperature,
    int top_k,
    double top_p,
  ) {
    return _rwkv_midimodel_run_with_tokenizer_and_sampler(
      model_handle,
      tokenizer_handle,
      sampler_handle,
      temperature,
      top_k,
      top_p,
    );
  }

  late final _rwkv_midimodel_run_with_tokenizer_and_samplerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              rwkv_model_t,
              rwkv_tokenizer_t,
              rwkv_sampler_t,
              ffi.Float,
              ffi.Int,
              ffi.Float)>>('rwkv_midimodel_run_with_tokenizer_and_sampler');
  late final _rwkv_midimodel_run_with_tokenizer_and_sampler =
      _rwkv_midimodel_run_with_tokenizer_and_samplerPtr.asFunction<
          void Function(rwkv_model_t, rwkv_tokenizer_t, rwkv_sampler_t, double,
              int, double)>();

  void rwkv_midimodel_save_result_to_midi(
    ffi.Pointer<ffi.Char> midi_path,
    int midi_path_length,
  ) {
    return _rwkv_midimodel_save_result_to_midi(
      midi_path,
      midi_path_length,
    );
  }

  late final _rwkv_midimodel_save_result_to_midiPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'rwkv_midimodel_save_result_to_midi');
  late final _rwkv_midimodel_save_result_to_midi =
      _rwkv_midimodel_save_result_to_midiPtr
          .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();
}

typedef rwkv_model_t = ffi.Pointer<ffi.Void>;
typedef rwkv_tokenizer_t = ffi.Pointer<ffi.Void>;
typedef rwkv_sampler_t = ffi.Pointer<ffi.Void>;
