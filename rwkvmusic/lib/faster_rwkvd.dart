// AUTO GENERATED FILE, DO NOT EDIT.
// 
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
/// faster_rwkvd.h in dart
class faster_rwkvd{
/// Holds the symbol lookup function.
final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

/// The symbols are looked up in [dynamicLibrary].
faster_rwkvd(ffi.DynamicLibrary dynamicLibrary): _lookup = dynamicLibrary.lookup;

/// The symbols are looked up with [lookup].
faster_rwkvd.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup): _lookup = lookup;

/// @brief Create an RWKV model.
/// 
/// @param path The path of the model.
/// @param strategy The strategy.
/// @return rwkv_model_t The handle to the created model.
rwkv_model_t rwkv_model_create(ffi.Pointer<ffi.Char> path,
ffi.Pointer<ffi.Char> strategy,
) {
  return _rwkv_model_create(path,
strategy,
);
}

late final _rwkv_model_createPtr = _lookup<
    ffi.NativeFunction<rwkv_model_t Function(ffi.Pointer<ffi.Char> , ffi.Pointer<ffi.Char> )>>('rwkv_model_create');
late final _rwkv_model_create = _rwkv_model_createPtr.asFunction<rwkv_model_t Function(ffi.Pointer<ffi.Char> , ffi.Pointer<ffi.Char> )>();

/// @brief Create an RWKV ABCTokenizer.
/// 
/// @return rwkv_tokenizer_t The handle to the created ABCTokenizer.
rwkv_tokenizer_t rwkv_ABCTokenizer_create() {
  return _rwkv_ABCTokenizer_create();
}

late final _rwkv_ABCTokenizer_createPtr = _lookup<
    ffi.NativeFunction<rwkv_tokenizer_t Function()>>('rwkv_ABCTokenizer_create');
late final _rwkv_ABCTokenizer_create = _rwkv_ABCTokenizer_createPtr.asFunction<rwkv_tokenizer_t Function()>();

rwkv_tokenizer_t rwkv_Tokenizer_create(ffi.Pointer<ffi.Char> path,
) {
  return _rwkv_Tokenizer_create(path,
);
}

late final _rwkv_Tokenizer_createPtr = _lookup<
    ffi.NativeFunction<rwkv_tokenizer_t Function(ffi.Pointer<ffi.Char> )>>('rwkv_Tokenizer_create');
late final _rwkv_Tokenizer_create = _rwkv_Tokenizer_createPtr.asFunction<rwkv_tokenizer_t Function(ffi.Pointer<ffi.Char> )>();

/// @brief Create an RWKV sampler.
/// 
/// @return rwkv_sampler_t The handle to the created sampler.
rwkv_sampler_t rwkv_sampler_create() {
  return _rwkv_sampler_create();
}

late final _rwkv_sampler_createPtr = _lookup<
    ffi.NativeFunction<rwkv_sampler_t Function()>>('rwkv_sampler_create');
late final _rwkv_sampler_create = _rwkv_sampler_createPtr.asFunction<rwkv_sampler_t Function()>();

/// @brief Set the seed of the sampler.
/// 
/// @param sampler_handle The handle to the sampler.
/// @param seed The seed.
void rwkv_sampler_set_seed(rwkv_sampler_t sampler_handle,
int seed,
) {
  return _rwkv_sampler_set_seed(sampler_handle,
seed,
);
}

late final _rwkv_sampler_set_seedPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(rwkv_sampler_t , ffi.Int )>>('rwkv_sampler_set_seed');
late final _rwkv_sampler_set_seed = _rwkv_sampler_set_seedPtr.asFunction<void Function(rwkv_sampler_t , int )>();

/// @brief Run the RWKV model with single input, with encoder/sampler/decoder.
int rwkv_abcmodel_run_prompt(rwkv_model_t model_handle,
rwkv_tokenizer_t tokenizer_handle,
rwkv_sampler_t sampler_handle,
ffi.Pointer<ffi.Char> input,
int input_length,
double temperature,
int top_k,
double top_p,
) {
  return _rwkv_abcmodel_run_prompt(model_handle,
tokenizer_handle,
sampler_handle,
input,
input_length,
temperature,
top_k,
top_p,
);
}

late final _rwkv_abcmodel_run_promptPtr = _lookup<
    ffi.NativeFunction<ffi.Char Function(rwkv_model_t , rwkv_tokenizer_t , rwkv_sampler_t , ffi.Pointer<ffi.Char> , ffi.Int , ffi.Float , ffi.Int , ffi.Float )>>('rwkv_abcmodel_run_prompt');
late final _rwkv_abcmodel_run_prompt = _rwkv_abcmodel_run_promptPtr.asFunction<int Function(rwkv_model_t , rwkv_tokenizer_t , rwkv_sampler_t , ffi.Pointer<ffi.Char> , int , double , int , double )>();

/// @brief Run the RWKV model with single input, with encoder/sampler/decoder.
int rwkv_abcmodel_run_with_tokenizer_and_sampler(rwkv_model_t model_handle,
rwkv_tokenizer_t tokenizer_handle,
rwkv_sampler_t sampler_handle,
int input,
double temperature,
int top_k,
double top_p,
) {
  return _rwkv_abcmodel_run_with_tokenizer_and_sampler(model_handle,
tokenizer_handle,
sampler_handle,
input,
temperature,
top_k,
top_p,
);
}

late final _rwkv_abcmodel_run_with_tokenizer_and_samplerPtr = _lookup<
    ffi.NativeFunction<ffi.Char Function(rwkv_model_t , rwkv_tokenizer_t , rwkv_sampler_t , ffi.Char , ffi.Float , ffi.Int , ffi.Float )>>('rwkv_abcmodel_run_with_tokenizer_and_sampler');
late final _rwkv_abcmodel_run_with_tokenizer_and_sampler = _rwkv_abcmodel_run_with_tokenizer_and_samplerPtr.asFunction<int Function(rwkv_model_t , rwkv_tokenizer_t , rwkv_sampler_t , int , double , int , double )>();

ffi.Pointer<ffi.Char> rwkv_chatmodel_eval(rwkv_model_t model_handle,
rwkv_tokenizer_t tokenizer_handle,
rwkv_sampler_t sampler_handle,
ffi.Pointer<ffi.Char> input,
double temperature,
int top_k,
double top_p,
double presence_penalty,
double frequency_penalty,
double penalty_decay,
) {
  return _rwkv_chatmodel_eval(model_handle,
tokenizer_handle,
sampler_handle,
input,
temperature,
top_k,
top_p,
presence_penalty,
frequency_penalty,
penalty_decay,
);
}

late final _rwkv_chatmodel_evalPtr = _lookup<
    ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(rwkv_model_t , rwkv_tokenizer_t , rwkv_sampler_t , ffi.Pointer<ffi.Char> , ffi.Float , ffi.Int , ffi.Float , ffi.Float , ffi.Float , ffi.Float )>>('rwkv_chatmodel_eval');
late final _rwkv_chatmodel_eval = _rwkv_chatmodel_evalPtr.asFunction<ffi.Pointer<ffi.Char> Function(rwkv_model_t , rwkv_tokenizer_t , rwkv_sampler_t , ffi.Pointer<ffi.Char> , double , int , double , double , double , double )>();

int rwkv_model_eval_id(rwkv_model_t model_handle,
rwkv_sampler_t sampler_handle,
int token,
double temperature,
int top_k,
double top_p,
double presence_penalty,
double frequency_penalty,
double penalty_decay,
) {
  return _rwkv_model_eval_id(model_handle,
sampler_handle,
token,
temperature,
top_k,
top_p,
presence_penalty,
frequency_penalty,
penalty_decay,
);
}

late final _rwkv_model_eval_idPtr = _lookup<
    ffi.NativeFunction<ffi.Int Function(rwkv_model_t , rwkv_sampler_t , ffi.Int , ffi.Float , ffi.Int , ffi.Float , ffi.Float , ffi.Float , ffi.Float )>>('rwkv_model_eval_id');
late final _rwkv_model_eval_id = _rwkv_model_eval_idPtr.asFunction<int Function(rwkv_model_t , rwkv_sampler_t , int , double , int , double , double , double , double )>();

int rwkv_model_load_states(rwkv_model_t model_handle,
ffi.Pointer<ffi.Char> path,
) {
  return _rwkv_model_load_states(model_handle,
path,
);
}

late final _rwkv_model_load_statesPtr = _lookup<
    ffi.NativeFunction<ffi.Int Function(rwkv_model_t , ffi.Pointer<ffi.Char> )>>('rwkv_model_load_states');
late final _rwkv_model_load_states = _rwkv_model_load_statesPtr.asFunction<int Function(rwkv_model_t , ffi.Pointer<ffi.Char> )>();

void rwkv_model_clear_states(rwkv_model_t model_handle,
) {
  return _rwkv_model_clear_states(model_handle,
);
}

late final _rwkv_model_clear_statesPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(rwkv_model_t )>>('rwkv_model_clear_states');
late final _rwkv_model_clear_states = _rwkv_model_clear_statesPtr.asFunction<void Function(rwkv_model_t )>();

void rwkv_qualcomm_save_context(rwkv_model_t model_handle,
ffi.Pointer<ffi.Char> path,
) {
  return _rwkv_qualcomm_save_context(model_handle,
path,
);
}

late final _rwkv_qualcomm_save_contextPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(rwkv_model_t , ffi.Pointer<ffi.Char> )>>('rwkv_qualcomm_save_context');
late final _rwkv_qualcomm_save_context = _rwkv_qualcomm_save_contextPtr.asFunction<void Function(rwkv_model_t , ffi.Pointer<ffi.Char> )>();

ffi.Pointer<ffi.Char> rwkv_get_soc_name() {
  return _rwkv_get_soc_name();
}

late final _rwkv_get_soc_namePtr = _lookup<
    ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('rwkv_get_soc_name');
late final _rwkv_get_soc_name = _rwkv_get_soc_namePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

}

typedef rwkv_model_t = ffi.Pointer<ffi.Void>;
typedef rwkv_tokenizer_t = ffi.Pointer<ffi.Void>;
typedef rwkv_sampler_t = ffi.Pointer<ffi.Void>;
